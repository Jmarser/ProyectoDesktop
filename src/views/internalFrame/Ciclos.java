/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.internalFrame;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import models.Ciclo;
import modelsDao.ManagerDaoImpl;

/**
 *
 * @author JMARSER
 */
public class Ciclos extends javax.swing.JInternalFrame {

    private ManagerDaoImpl gestor = new ManagerDaoImpl();

    //modelo para la tabla
    private DefaultTableModel modelo_tabla = new DefaultTableModel();
    private List<Ciclo> listadoCiclos = new ArrayList<>();

    //variable estática con la que controlamos que sólo se pueda instanciar una ventana de este clase
    public static String x;

    public Ciclos() {
        initComponents();
        this.x = "x";
        initVentana();
    }

    /*Iniciamos algunas características de la ventana*/
    private void initVentana() {
        this.setTitle("GESTIÓN DE CICLOS");
        initTabla();
        mostrarCiclos();
    }

    /*Damos estilo a la tabla y nombramos sus columnas*/
    private void initTabla() {
        modelo_tabla.addColumn("Id");
        modelo_tabla.addColumn("Nombre ciclo");
        this.jt_listaCiclos.setModel(modelo_tabla);
        
        //especificamos el ancho de las columnas
        this.jt_listaCiclos.getColumnModel().getColumn(0).setPreferredWidth(20);
        this.jt_listaCiclos.getColumnModel().getColumn(1).setPreferredWidth(300);
        
        //centramos el contenido de las celdas
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        this.jt_listaCiclos.getColumnModel().getColumn(0).setCellRenderer(tcr);
        this.jt_listaCiclos.getColumnModel().getColumn(1).setCellRenderer(tcr);
        
        //para centrar el contenido de la cabecera necesitamos de esta clase
        JTableHeader th = this.jt_listaCiclos.getTableHeader();
        th.setDefaultRenderer(tcr);
        this.jt_listaCiclos.setTableHeader(th);
    }

    /*Obtenemos los ciclos que hay guardados en la base de datos y los cargamos
    en el JComboBox correspondiente*/
    private void mostrarCiclos() {
        limpiarTabla();
        listadoCiclos = (ArrayList<Ciclo>) gestor.getCicloDao().getAll();

        Object[] linea = new Object[modelo_tabla.getColumnCount()];

        if (listadoCiclos != null) {
            for (int i = 0; i < listadoCiclos.size(); i++) {
                linea[0] = listadoCiclos.get(i).getId();
                linea[1] = listadoCiclos.get(i).getNombre();

                modelo_tabla.addRow(linea);
            }
        }

    }

    /*Método con el que solicitamos que un ciclo se guarde en la base de datos*/
    private void addCiclo() {
        if (validarCampos()) {
            Ciclo ciclo = new Ciclo();
            ciclo.setNombre(this.jtf_nuevoCiclo.getText());
            
            if (gestor.getCicloDao().insert(ciclo)) {
                JOptionPane.showMessageDialog(null, "Ciclo guardado correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar el ciclo.");
            }

        } else {
            //no se ha introducido un ciclo por lo que establecemos el foco en el JTextField
            this.jtf_nuevoCiclo.requestFocus();
        }
        limpiarCampo();
        mostrarCiclos();
    }

    private boolean validarCampos() {
        if (!this.jtf_nuevoCiclo.getText().isEmpty()) {
            return true;
        } else {
            return false;
        }
    }

    private void limpiarCampo() {
        this.jtf_nuevoCiclo.setText("");
    }

    /*método con el que limpiamos la tabla*/
    private void limpiarTabla() {
        modelo_tabla.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jt_listaCiclos = new javax.swing.JTable();
        btn_guardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtf_nuevoCiclo = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jt_listaCiclos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jt_listaCiclos);
        if (jt_listaCiclos.getColumnModel().getColumnCount() > 0) {
            jt_listaCiclos.getColumnModel().getColumn(0).setResizable(false);
            jt_listaCiclos.getColumnModel().getColumn(0).setPreferredWidth(10);
            jt_listaCiclos.getColumnModel().getColumn(1).setResizable(false);
            jt_listaCiclos.getColumnModel().getColumn(1).setPreferredWidth(300);
        }

        btn_guardar.setText("GUARDAR");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nuevo ciclo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jtf_nuevoCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_guardar)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_nuevoCiclo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        this.x = null;
    }//GEN-LAST:event_formInternalFrameClosing

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        addCiclo();
    }//GEN-LAST:event_btn_guardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jt_listaCiclos;
    private javax.swing.JTextField jtf_nuevoCiclo;
    // End of variables declaration//GEN-END:variables
}
